{"version":3,"sources":["Applications/CocosCreator.app/Contents/Resources/app.asar/node_modules/browser-pack/_prelude.js","Script/HelloWorld.js","project.js","Script/game_manager.js","Script/main.js","Script/player.js","Script/scroll.js","Script/target.js","Script/ui/ui.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","HelloWorld","module","cc","_RF","push","Class","extends","Component","properties","label","default","type","Label","text","onLoad","this","string","update","dt","pop","game_manager","player","Node","bg","ui","manager","director","getCollisionManager","enabled","console","log","bgScript","getComponent","init","playerScript","uiScript","main","MaxPlayerBaseSpeed","PlayerAcceleration","MaxSpeedFloated","SpeedFloatRecovery","SpeedFloatAcceleration","touchParticle","ParticleSystem","game","current_speed","enableInput","baseSpeed","current_speed_float","registerInput","self","eventManager","addListener","event","EventListener","TOUCH_ONE_BY_ONE","onTouchBegan","touch","position","node","parent","convertTouchToNodeSpaceAR","x","y","resetSystem","onTouchMoved","onTouchEnded","Math","min","emit","msg","max","current","onCollisionEnter","other","loadScene","scroll","playerController","dur","topY","childrenCount","child","children","_i","_child","height","target","speed","speakDuration","speakTextBox","speak_duration_now","speed_progress","ProgressBar","speed_progress_float","progress","on","detail"],"mappings":"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","file":"project.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\ncc._RF.push(module, '280c3rsZJJKnZ9RqbALVwtK', 'HelloWorld');\n// Script/HelloWorld.js\n\n'use strict';\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        label: {\n            default: null,\n            type: cc.Label\n        },\n        // defaults, set visually when attaching this script to the Canvas\n        text: 'Hello, World!'\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.label.string = this.text;\n    },\n\n    // called every frame\n    update: function update(dt) {}\n});\n\ncc._RF.pop();","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"HelloWorld\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, '280c3rsZJJKnZ9RqbALVwtK', 'HelloWorld');\n// Script/HelloWorld.js\n\n'use strict';\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        label: {\n            default: null,\n            type: cc.Label\n        },\n        // defaults, set visually when attaching this script to the Canvas\n        text: 'Hello, World!'\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.label.string = this.text;\n    },\n\n    // called every frame\n    update: function update(dt) {}\n});\n\ncc._RF.pop();\n},{}],\"game_manager\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, 'b92e3N9npRHXaRjHudJNxd2', 'game_manager');\n// Script/game_manager.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        player: cc.Node,\n        bg: cc.Node,\n        ui: cc.Node\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        console.log(\"init bg script\");\n        var bgScript = this.bg.getComponent(\"scroll\");\n        bgScript.init(this);\n\n        console.log(\"init player script\");\n        var playerScript = this.player.getComponent(\"player\");\n        playerScript.init(this);\n\n        console.log(\"init ui script\");\n        var uiScript = this.ui.getComponent(\"ui\");\n        uiScript.init(this);\n    }\n\n});\n\ncc._RF.pop();\n},{}],\"main\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, 'bee3a1CvJNBoYhcZiC5zxvX', 'main');\n// Script/main.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {}\n\n});\n\ncc._RF.pop();\n},{}],\"player\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, '10cf4JEH8FKy5o9XIyEOnR6', 'player');\n// Script/player.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        MaxPlayerBaseSpeed: 200,\n        PlayerAcceleration: 600,\n        MaxSpeedFloated: 1.6,\n        SpeedFloatRecovery: 0.6,\n        SpeedFloatAcceleration: 0.1,\n        touchParticle: cc.ParticleSystem\n\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n    init: function init(game) {\n        this.game = game;\n        this.current_speed = 0;\n        this.enableInput = false;\n        this.baseSpeed = 0;\n        this.current_speed_float = 1;\n        this.registerInput();\n    },\n    registerInput: function registerInput() {\n        var self = this;\n        // touch input\n        cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\n            onTouchBegan: function onTouchBegan(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n\n                var position = self.node.parent.convertTouchToNodeSpaceAR(touch);\n                self.touchParticle.node.x = position.x;\n                self.touchParticle.node.y = position.y;\n                self.touchParticle.resetSystem();\n                self.touchParticle.enabled = true;\n                return true;\n            },\n            onTouchMoved: function onTouchMoved(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n            },\n            onTouchEnded: function onTouchEnded(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n\n                self.current_speed_float += self.SpeedFloatAcceleration;\n                self.current_speed_float = Math.min(self.current_speed_float, self.MaxSpeedFloated);\n                self.game.node.emit(\"player_speed_floating\", { msg: { max: self.MaxSpeedFloated, current: self.current_speed_float } });\n            }\n        }, self.node);\n    },\n\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        this.baseSpeed += this.PlayerAcceleration * dt;\n        if (this.baseSpeed > this.MaxPlayerBaseSpeed) {\n            this.baseSpeed = this.MaxPlayerBaseSpeed;\n            this.enableInput = true;\n        }\n        this.game.node.emit(\"player_base_speed_change\", { max: this.MaxPlayerBaseSpeed, current: this.baseSpeed });\n\n        this.current_speed_float -= this.SpeedFloatRecovery * dt;\n        this.game.node.emit(\"player_speed_floating\", { max: this.MaxSpeedFloated, current: this.current_speed_float });\n\n        this.current_speed_float = Math.max(this.current_speed_float, 1);\n        this.current_speed = this.baseSpeed * this.current_speed_float;\n    },\n    /**\n    * 当碰撞产生的时候调用\n    * @param  {Collider} other 产生碰撞的另一个碰撞组件\n    * @param  {Collider} self  产生碰撞的自身的碰撞组件\n     */\n    onCollisionEnter: function onCollisionEnter(other, self) {\n        console.log('catch lolita!!!');\n        cc.director.loadScene('main');\n    }\n});\n\ncc._RF.pop();\n},{}],\"scroll\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, '2efa475NSNPNrsh+QanyzHg', 'scroll');\n// Script/scroll.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        player: cc.Node\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    init: function init(game) {\n        this.playerController = this.player.getComponent(\"player\");\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        var dur = this.playerController.current_speed * dt;\n        var topY = 0;\n        for (var i = 0; i < this.node.childrenCount; i++) {\n            var child = this.node.children[i];\n            child.y -= dur;\n            if (child.y > topY) {\n                topY = child.y;\n            }\n        }\n        for (var _i = 0; _i < this.node.childrenCount; _i++) {\n            var _child = this.node.children[_i];\n            if (_child.y < -(_child.height * 1.5)) {\n                _child.y = topY + _child.height;\n            }\n        }\n    }\n});\n\ncc._RF.pop();\n},{}],\"target\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, '6a305F/xYBFj6frW/RuNUTZ', 'target');\n// Script/target.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        player: cc.Node,\n        speed: 400,\n        speakDuration: 3,\n        speakTextBox: cc.Label\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerController = this.player.getComponent(\"player\");\n\n        this.speak_duration_now = 0;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        var speed = this.speed - this.playerController.current_speed;\n        this.node.y += speed * dt;\n\n        this.speak_duration_now += dt;\n        if (this.speak_duration_now > this.speakDuration) {\n            this.speakTextBox.enabled = false;\n        }\n    }\n});\n\ncc._RF.pop();\n},{}],\"ui\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, 'a191bhJYSpCOLGrL0KJ9P9a', 'ui');\n// Script/ui/ui.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        speed_progress: cc.ProgressBar,\n        speed_progress_float: cc.ProgressBar\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.speed_progress.progress = 0.0;\n        this.speed_progress_float.progress = 0.0;\n    },\n\n    init: function init(game) {\n        console.log(this.speed_progress);\n        this.game = game;\n        var self = this;\n        self.game.node.on(\"player_base_speed_change\", function (event) {\n            self.speed_progress.progress = event.detail.current / event.detail.max;\n        });\n        self.game.node.on(\"player_speed_floating\", function (event) {\n            self.speed_progress_float.progress = (event.detail.current - 1) / (event.detail.max - 1);\n        });\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {}\n});\n\ncc._RF.pop();\n},{}]},{},[\"HelloWorld\",\"game_manager\",\"main\",\"player\",\"scroll\",\"target\",\"ui\"])\n\n","\"use strict\";\ncc._RF.push(module, 'b92e3N9npRHXaRjHudJNxd2', 'game_manager');\n// Script/game_manager.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        player: cc.Node,\n        bg: cc.Node,\n        ui: cc.Node\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        console.log(\"init bg script\");\n        var bgScript = this.bg.getComponent(\"scroll\");\n        bgScript.init(this);\n\n        console.log(\"init player script\");\n        var playerScript = this.player.getComponent(\"player\");\n        playerScript.init(this);\n\n        console.log(\"init ui script\");\n        var uiScript = this.ui.getComponent(\"ui\");\n        uiScript.init(this);\n    }\n\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, 'bee3a1CvJNBoYhcZiC5zxvX', 'main');\n// Script/main.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {}\n\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, '10cf4JEH8FKy5o9XIyEOnR6', 'player');\n// Script/player.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        MaxPlayerBaseSpeed: 200,\n        PlayerAcceleration: 600,\n        MaxSpeedFloated: 1.6,\n        SpeedFloatRecovery: 0.6,\n        SpeedFloatAcceleration: 0.1,\n        touchParticle: cc.ParticleSystem\n\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n    init: function init(game) {\n        this.game = game;\n        this.current_speed = 0;\n        this.enableInput = false;\n        this.baseSpeed = 0;\n        this.current_speed_float = 1;\n        this.registerInput();\n    },\n    registerInput: function registerInput() {\n        var self = this;\n        // touch input\n        cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\n            onTouchBegan: function onTouchBegan(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n\n                var position = self.node.parent.convertTouchToNodeSpaceAR(touch);\n                self.touchParticle.node.x = position.x;\n                self.touchParticle.node.y = position.y;\n                self.touchParticle.resetSystem();\n                self.touchParticle.enabled = true;\n                return true;\n            },\n            onTouchMoved: function onTouchMoved(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n            },\n            onTouchEnded: function onTouchEnded(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n\n                self.current_speed_float += self.SpeedFloatAcceleration;\n                self.current_speed_float = Math.min(self.current_speed_float, self.MaxSpeedFloated);\n                self.game.node.emit(\"player_speed_floating\", { msg: { max: self.MaxSpeedFloated, current: self.current_speed_float } });\n            }\n        }, self.node);\n    },\n\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        this.baseSpeed += this.PlayerAcceleration * dt;\n        if (this.baseSpeed > this.MaxPlayerBaseSpeed) {\n            this.baseSpeed = this.MaxPlayerBaseSpeed;\n            this.enableInput = true;\n        }\n        this.game.node.emit(\"player_base_speed_change\", { max: this.MaxPlayerBaseSpeed, current: this.baseSpeed });\n\n        this.current_speed_float -= this.SpeedFloatRecovery * dt;\n        this.game.node.emit(\"player_speed_floating\", { max: this.MaxSpeedFloated, current: this.current_speed_float });\n\n        this.current_speed_float = Math.max(this.current_speed_float, 1);\n        this.current_speed = this.baseSpeed * this.current_speed_float;\n    },\n    /**\n    * 当碰撞产生的时候调用\n    * @param  {Collider} other 产生碰撞的另一个碰撞组件\n    * @param  {Collider} self  产生碰撞的自身的碰撞组件\n     */\n    onCollisionEnter: function onCollisionEnter(other, self) {\n        console.log('catch lolita!!!');\n        cc.director.loadScene('main');\n    }\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, '2efa475NSNPNrsh+QanyzHg', 'scroll');\n// Script/scroll.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        player: cc.Node\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    init: function init(game) {\n        this.playerController = this.player.getComponent(\"player\");\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        var dur = this.playerController.current_speed * dt;\n        var topY = 0;\n        for (var i = 0; i < this.node.childrenCount; i++) {\n            var child = this.node.children[i];\n            child.y -= dur;\n            if (child.y > topY) {\n                topY = child.y;\n            }\n        }\n        for (var _i = 0; _i < this.node.childrenCount; _i++) {\n            var _child = this.node.children[_i];\n            if (_child.y < -(_child.height * 1.5)) {\n                _child.y = topY + _child.height;\n            }\n        }\n    }\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, '6a305F/xYBFj6frW/RuNUTZ', 'target');\n// Script/target.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        player: cc.Node,\n        speed: 400,\n        speakDuration: 3,\n        speakTextBox: cc.Label\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerController = this.player.getComponent(\"player\");\n\n        this.speak_duration_now = 0;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        var speed = this.speed - this.playerController.current_speed;\n        this.node.y += speed * dt;\n\n        this.speak_duration_now += dt;\n        if (this.speak_duration_now > this.speakDuration) {\n            this.speakTextBox.enabled = false;\n        }\n    }\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, 'a191bhJYSpCOLGrL0KJ9P9a', 'ui');\n// Script/ui/ui.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        speed_progress: cc.ProgressBar,\n        speed_progress_float: cc.ProgressBar\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.speed_progress.progress = 0.0;\n        this.speed_progress_float.progress = 0.0;\n    },\n\n    init: function init(game) {\n        console.log(this.speed_progress);\n        this.game = game;\n        var self = this;\n        self.game.node.on(\"player_base_speed_change\", function (event) {\n            self.speed_progress.progress = event.detail.current / event.detail.max;\n        });\n        self.game.node.on(\"player_speed_floating\", function (event) {\n            self.speed_progress_float.progress = (event.detail.current - 1) / (event.detail.max - 1);\n        });\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {}\n});\n\ncc._RF.pop();"],"sourceRoot":"/source/"}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=