{"version":3,"sources":["Applications/CocosCreator.app/Contents/Resources/app.asar/node_modules/browser-pack/_prelude.js","Script/common.js","project.js","Script/game_manager.js","Script/main.js","Script/player.js","Script/net/request.js","Script/scroll.js","Script/lib/simple-request.js","Script/target.js","Script/ui/ui_begin.js","Script/ui/ui_end.js","Script/ui/ui_main.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","common","module","cc","_RF","push","targetSpeedCfg","liuyifei","eva_green","gakki","playerInfo","mountInfo","base_speed","float_speed","float_speed_acceleration","targetInfo","speed","name","SelectTarget","index","this","pop","game_manager","request","gameManager","that","emitter","Node","console","log","start","manager","director","getCollisionManager","enabled","loadScene","end","passed_tm","CatchLolita","data","param","endScene","getScene","endScript","children","getComponent","init","fans","restart","./net/request","main","Class","extends","Component","properties","onLoad","player","MaxPlayerBaseSpeed","PlayerAcceleration","MaxSpeedFloated","SpeedFloatRecovery","SpeedFloatAcceleration","touchParticle","ParticleSystem","current_speed","enableInput","baseSpeed","current_speed_float","registerInput","self","eventManager","addListener","event","EventListener","TOUCH_ONE_BY_ONE","onTouchBegan","touch","position","node","parent","convertTouchToNodeSpaceAR","x","y","resetSystem","onTouchMoved","onTouchEnded","Math","min","emit","msg","max","current","update","dt","onCollisionEnter","other","nickname","simpleRequest","Request","server_address","tm","cb","post","target_id","../common","../lib/simple-request","scroll","playerController","dur","topY","childrenCount","child","_i","_child","height","simple-request","timeoutLimit","SRequest","get","baseURL","handlerURL","params","xhr","XMLHttpRequest","paramStr","getURLParamsString","open","timeout","onload","JSON","parse","responseText","ontimeout","send","urlParams","setRequestHeader","bodyContent","stringify","onerror","jump","url","window","location","href","isStart","undefined","target","speakDuration","speakTextBox","Label","speak_duration_now","sprite","Sprite","spriteFrame","SpriteFrame","raw","ui_begin","ebox_nickname","EditBox","toggleGroup","ToggleGroup","on","string","alert","toggleItems","item","isChecked","ui_end","BtnRestart","Button","LabelRank","rankList","toFixed","ui_main","speed_progress","ProgressBar","speed_progress_float","lb","progress","text","detail"],"mappings":"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","file":"project.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\ncc._RF.push(module, '0aff6ovTK5N44pO+pA+DbVM', 'common');\n// Script/common.js\n\n\"use strict\";\n\nvar targetSpeedCfg = {\n    \"liuyifei\": 400,\n    \"eva_green\": 500,\n    \"gakki\": 480\n};\n\nmodule.exports = {\n    playerInfo: {},\n    mountInfo: {\n        base_speed: 500,\n        float_speed: 1.8,\n        float_speed_acceleration: 0.05\n    },\n    targetInfo: {\n        speed: 400,\n        name: \"gakki\"\n    },\n    SelectTarget: function SelectTarget(index) {\n        var name = [\"gakki\", \"eva_green\", \"liuyifei\"][index];\n        this.targetInfo.name = name;\n        if (targetSpeedCfg[name]) {\n            this.targetInfo.speed = targetSpeedCfg[name];\n        }\n    }\n};\n\ncc._RF.pop();","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"common\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, '0aff6ovTK5N44pO+pA+DbVM', 'common');\n// Script/common.js\n\n\"use strict\";\n\nvar targetSpeedCfg = {\n    \"liuyifei\": 400,\n    \"eva_green\": 500,\n    \"gakki\": 480\n};\n\nmodule.exports = {\n    playerInfo: {},\n    mountInfo: {\n        base_speed: 500,\n        float_speed: 1.8,\n        float_speed_acceleration: 0.05\n    },\n    targetInfo: {\n        speed: 400,\n        name: \"gakki\"\n    },\n    SelectTarget: function SelectTarget(index) {\n        var name = [\"gakki\", \"eva_green\", \"liuyifei\"][index];\n        this.targetInfo.name = name;\n        if (targetSpeedCfg[name]) {\n            this.targetInfo.speed = targetSpeedCfg[name];\n        }\n    }\n};\n\ncc._RF.pop();\n},{}],\"game_manager\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, 'b92e3N9npRHXaRjHudJNxd2', 'game_manager');\n// Script/game_manager.js\n\n\"use strict\";\n\nvar request = require(\"./net/request\");\nvar common = require(\"common\");\nvar gameManager = gameManager || function () {\n    var that = {};\n    that.emitter = new cc.Node(\"game_manager\");\n    console.log(that.emitter);\n\n    that.start = function () {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        cc.director.loadScene('main');\n    };\n\n    that.end = function (passed_tm) {\n        request.CatchLolita(passed_tm, function (data) {\n            console.log(data);\n            var scene = cc.director.loadScene('end', function (param) {\n                var endScene = cc.director.getScene();\n                var endScript = endScene.children[0].getComponent(\"ui_end\");\n                endScript.init(data.fans);\n            });\n        });\n    };\n\n    that.restart = function () {\n        that.emitter = new cc.Node(\"game_manager\");\n        cc.director.loadScene('begin');\n    };\n    return that;\n}();\n\nmodule.exports = gameManager;\n\n// cc.Class({\n//     extends: cc.Component,\n\n//     properties: {\n//         player:cc.Node,\n//         bg:cc.Node,\n//         ui:cc.Node\n//         // foo: {\n//         //    default: null,      // The default value will be used only when the component attaching\n//         //                           to a node for the first time\n//         //    url: cc.Texture2D,  // optional, default is typeof default\n//         //    serializable: true, // optional, default is true\n//         //    visible: true,      // optional, default is true\n//         //    displayName: 'Foo', // optional\n//         //    readonly: false,    // optional, default is false\n//         // },\n//         // ...\n//     },\n\n//     // use this for initialization\n//     onLoad: function () {\n//         var manager = cc.director.getCollisionManager();\n//         manager.enabled = true;\n//         console.log(\"init bg script\");\n//         let bgScript=this.bg.getComponent(\"scroll\");\n//         bgScript.init(this);\n\n//         console.log(\"init player script\");\n//         let playerScript=this.player.getComponent(\"player\");\n//         playerScript.init(this);\n\n//         console.log(\"init ui script\");\n//         let uiScript=this.ui.getComponent(\"ui\");\n//         uiScript.init(this);\n//     },\n\n//     // called every frame, uncomment this function to activate update callback\n//     // update: function (dt) {\n\n//     // },\n// });\n\ncc._RF.pop();\n},{\"./net/request\":\"request\",\"common\":\"common\"}],\"main\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, 'bee3a1CvJNBoYhcZiC5zxvX', 'main');\n// Script/main.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {}\n\n});\n\ncc._RF.pop();\n},{}],\"player\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, '10cf4JEH8FKy5o9XIyEOnR6', 'player');\n// Script/player.js\n\n\"use strict\";\n\nvar common = require(\"common\");\nvar gameManager = require(\"game_manager\");\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        MaxPlayerBaseSpeed: 200,\n        PlayerAcceleration: 600,\n        MaxSpeedFloated: 1.6,\n        SpeedFloatRecovery: 0.6,\n        SpeedFloatAcceleration: 0.1,\n        touchParticle: cc.ParticleSystem\n\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        console.log(gameManager);\n        this.init();\n        this.MaxPlayerBaseSpeed = common.mountInfo.base_speed;\n        this.MaxSpeedFloated = common.mountInfo.float_speed;\n        this.SpeedFloatAcceleration = common.mountInfo.float_speed_acceleration;\n    },\n    init: function init() {\n        this.current_speed = 0;\n        this.enableInput = false;\n        this.baseSpeed = 0;\n        this.MaxSpeedFloated = common.mountInfo.float_speed;\n        this.current_speed_float = 1;\n        this.registerInput();\n\n        this.passed_tm = 0;\n    },\n    registerInput: function registerInput() {\n        var self = this;\n        // touch input\n        cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\n            onTouchBegan: function onTouchBegan(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n\n                var position = self.node.parent.convertTouchToNodeSpaceAR(touch);\n                self.touchParticle.node.x = position.x;\n                self.touchParticle.node.y = position.y;\n                self.touchParticle.resetSystem();\n                self.touchParticle.enabled = true;\n                return true;\n            },\n            onTouchMoved: function onTouchMoved(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n            },\n            onTouchEnded: function onTouchEnded(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n\n                self.current_speed_float += self.SpeedFloatAcceleration;\n                self.current_speed_float = Math.min(self.current_speed_float, self.MaxSpeedFloated);\n                gameManager.emitter.emit(\"player_speed_floating\", { msg: { max: self.MaxSpeedFloated, current: self.current_speed_float } });\n            }\n        }, self.node);\n    },\n\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        this.passed_tm += dt;\n        this.baseSpeed += this.PlayerAcceleration * dt;\n        if (this.baseSpeed > this.MaxPlayerBaseSpeed) {\n            this.baseSpeed = this.MaxPlayerBaseSpeed;\n            this.enableInput = true;\n        }\n\n        gameManager.emitter.emit(\"player_base_speed_change\", { max: this.MaxPlayerBaseSpeed, current: this.baseSpeed });\n\n        this.current_speed_float -= this.SpeedFloatRecovery * dt;\n        gameManager.emitter.emit(\"player_speed_floating\", { max: this.MaxSpeedFloated, current: this.current_speed_float });\n\n        this.current_speed_float = Math.max(this.current_speed_float, 1);\n        this.current_speed = this.baseSpeed * this.current_speed_float;\n    },\n    /**\n    * 当碰撞产生的时候调用\n    * @param  {Collider} other 产生碰撞的另一个碰撞组件\n    * @param  {Collider} self  产生碰撞的自身的碰撞组件\n     */\n    onCollisionEnter: function onCollisionEnter(other, self) {\n        console.log(common.playerInfo.nickname + ' catch lolita!!!');\n        gameManager.end(this.passed_tm);\n    }\n});\n\ncc._RF.pop();\n},{\"common\":\"common\",\"game_manager\":\"game_manager\"}],\"request\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, 'ed43dIzl+hIbKUafMkc5ezW', 'request');\n// Script/net/request.js\n\n\"use strict\";\n\nvar simpleRequest = require(\"../lib/simple-request\");\nvar common = require(\"../common\");\n\nvar Request = Request || function () {\n    var that = {};\n    var server_address = \"http://test.game.xiaoyaoai.cn:30052\";\n    that.CatchLolita = function (tm, cb) {\n        simpleRequest.post(server_address, \"/user/be_catch\", {}, { \"target_id\": common.targetInfo.name, \"nickname\": common.playerInfo.nickname, \"tm\": tm }, cb);\n    };\n    return that;\n}();\nmodule.exports = Request;\n// cc.Class({\n//     extends: cc.Component,\n\n//     properties: {\n//         ServerAddress:\"localhost:30093\",\n//         // foo: {\n//         //    default: null,      // The default value will be used only when the component attaching\n//         //                           to a node for the first time\n//         //    url: cc.Texture2D,  // optional, default is typeof default\n//         //    serializable: true, // optional, default is true\n//         //    visible: true,      // optional, default is true\n//         //    displayName: 'Foo', // optional\n//         //    readonly: false,    // optional, default is false\n//         // },\n//         // ...\n//     },\n\n//     // use this for initialization\n//     onLoad: function () {\n\n//     },\n//     CatchLolita:function(target,tm){\n//         simpleRequest.post(this.ServerAddress,\"be_catch\",{},{\"target_id\":target,Nickname:common.playerInfo.nickname,tm:tm},function(err,data){\n//             console.log(\"request callback\");\n//         })\n//     }\n\n//     // called every frame, uncomment this function to activate update callback\n//     // update: function (dt) {\n\n//     // },\n// });\n\ncc._RF.pop();\n},{\"../common\":\"common\",\"../lib/simple-request\":\"simple-request\"}],\"scroll\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, '2efa475NSNPNrsh+QanyzHg', 'scroll');\n// Script/scroll.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        player: cc.Node\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerController = this.player.getComponent(\"player\");\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        var dur = this.playerController.current_speed * dt;\n        var topY = 0;\n        for (var i = 0; i < this.node.childrenCount; i++) {\n            var child = this.node.children[i];\n            child.y -= dur;\n            if (child.y > topY) {\n                topY = child.y;\n            }\n        }\n        for (var _i = 0; _i < this.node.childrenCount; _i++) {\n            var _child = this.node.children[_i];\n            if (_child.y < -(_child.height * 1.5)) {\n                _child.y = topY + _child.height;\n            }\n        }\n    }\n});\n\ncc._RF.pop();\n},{}],\"simple-request\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, '363391WEHNNLpzBRKb/3v+U', 'simple-request');\n// Script/lib/simple-request.js\n\n\"use strict\";\n\n/**\n * Created by wizard on 16/4/1.\n */\nvar timeoutLimit = 30 * 1000;\n\n//SRequest.get(defines.gameHomeURL, \"s/Info/GetBag\", {test: 1, name: \"haha\"}, data=> {\n//  console.log('resp 1' + JSON.stringify(data));\n//});\n//\n//SRequest.post(defines.gameHomeURL, \"s/Info/RenamePet\", {\"pet_id\": 1000}, data=> {\n//  console.log('resp 2' + JSON.stringify(data));\n//})\n\nvar SRequest = SRequest || function () {\n  var that = {};\n\n  that.get = function (baseURL, handlerURL, params, cb) {\n    var xhr = new XMLHttpRequest();\n\n    var paramStr = getURLParamsString(params);\n    console.log(\"get string: \" + baseURL + handlerURL + paramStr);\n\n    xhr.open(\"GET\", baseURL + handlerURL + paramStr, true);\n    xhr.timeout = timeoutLimit;\n    xhr.onload = function () {\n      var data = JSON.parse(xhr.responseText);\n      if (cb) {\n        cb.call(this, data);\n      }\n    };\n    xhr.ontimeout = function () {\n      if (cb) {\n        cb.call(this, { timeout: true });\n      }\n    };\n    xhr.send();\n  };\n\n  that.post = function (baseURL, handlerURL, urlParams, params, cb) {\n\n    var xhr = new XMLHttpRequest(); // new HttpRequest instance\n    console.log('post', baseURL + handlerURL + getURLParamsString(urlParams));\n    xhr.open(\"POST\", baseURL + handlerURL + getURLParamsString(urlParams), true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.timeout = timeoutLimit;\n    xhr.onload = function () {\n      //console.log('xhr.onload',xhr.responseText);\n      var data = JSON.parse(xhr.responseText);\n      if (cb) {\n        cb.call(this, data);\n      }\n    };\n    xhr.ontimeout = function () {\n      if (cb) {\n        cb.call(this, { timeout: true });\n      }\n    };\n    console.log('xhr.onload', params);\n    var bodyContent = params ? JSON.stringify(params) : \"\";\n    xhr.onerror = function (e) {\n      console.log('server error ' + e);\n      if (cb) {\n        cb.call(this, { timeout: true });\n      }\n    };\n    xhr.send(bodyContent);\n  };\n\n  that.jump = function (url, params) {\n    var paramStr = getURLParamsString(params);\n    console.log(\"jump to url: \" + url + paramStr);\n    window.location.href = url + paramStr;\n  };\n\n  var getURLParamsString = function getURLParamsString(params, isStart) {\n    var paramStr = \"\";\n    if (params) {\n      var start = isStart != undefined ? isStart : true;\n      for (var index in params) {\n        if (start) {\n          start = false;\n          paramStr += \"?\";\n        } else {\n          paramStr += \"&\";\n        }\n        paramStr += index + \"=\" + params[index];\n      }\n    }\n\n    return paramStr;\n  };\n\n  return that;\n}();\nmodule.exports = SRequest;\n\ncc._RF.pop();\n},{}],\"target\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, '6a305F/xYBFj6frW/RuNUTZ', 'target');\n// Script/target.js\n\n\"use strict\";\n\nvar common = require(\"common\");\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        player: cc.Node,\n        speed: 400,\n        speakDuration: 3,\n        speakTextBox: cc.Label\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        console.log(\"target on loaded\");\n        console.log(common.targetInfo);\n        this.playerController = this.player.getComponent(\"player\");\n\n        this.speak_duration_now = 0;\n        this.speed = common.targetInfo.speed;\n        var sprite = this.node.getComponent(cc.Sprite);\n        sprite.spriteFrame = new cc.SpriteFrame(cc.url.raw(\"Texture/\" + \"target_\" + common.targetInfo.name + \".png\"));\n\n        // cc.loader.load(cc.url.raw(\"Texture/\"+\"target_\"+common.targetInfo.name+\".png\"),cc.SpriteFrame,function (err, spriteFrame) {\n        //     if(err){\n        //         console.log(err);\n        //         return\n        //     }\n        //     sprite.spriteFrame=spriteFrame;\n        // });\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        var speed = this.speed - this.playerController.current_speed;\n        this.node.y += speed * dt;\n\n        this.speak_duration_now += dt;\n        if (this.speak_duration_now > this.speakDuration) {\n            this.speakTextBox.enabled = false;\n        }\n    }\n});\n\ncc._RF.pop();\n},{\"common\":\"common\"}],\"ui_begin\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, '67655elHOdPsp2u/VSmhf6P', 'ui_begin');\n// Script/ui/ui_begin.js\n\n\"use strict\";\n\nvar common = require(\"common\");\nvar gameManager = require(\"game_manager\");\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        ebox_nickname: cc.EditBox,\n        toggleGroup: cc.ToggleGroup\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var self = this;\n        this.node.on('touchend', function (event) {\n            console.log('touchend');\n            common.playerInfo.nickname = self.ebox_nickname.string;\n            if (common.playerInfo.nickname == \"\") {\n                alert(\"昵称不能为空\");\n                return;\n            }\n\n            for (var i = 0; i < self.toggleGroup.toggleItems.length; i++) {\n                var item = self.toggleGroup.toggleItems[i];\n                console.log(item.name);\n                if (item.isChecked) {\n                    common.SelectTarget(i);\n                }\n            }\n            gameManager.start();\n        }, this);\n    }\n\n});\n\ncc._RF.pop();\n},{\"common\":\"common\",\"game_manager\":\"game_manager\"}],\"ui_end\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, 'f60deSZV2dHjoaQ5BGbW+8J', 'ui_end');\n// Script/ui/ui_end.js\n\n'use strict';\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        BtnRestart: cc.Button,\n        LabelRank: cc.Label\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.BtnRestart.node.on('touchend', function (event) {\n            console.log('touchend');\n            cc.director.loadScene('begin');\n        }, this);\n    },\n\n    init: function init(rankList) {\n        this.LabelRank.string = \"\";\n        console.log(rankList.length);\n        for (var i = 0; i < rankList.length; i++) {\n            this.LabelRank.string += i + 1 + \".\" + rankList[i].nickname + \":\" + rankList[i].tm.toFixed(2) + \"\\n\";\n        }\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RF.pop();\n},{}],\"ui_main\":[function(require,module,exports){\n\"use strict\";\ncc._RF.push(module, 'a191bhJYSpCOLGrL0KJ9P9a', 'ui_main');\n// Script/ui/ui_main.js\n\n\"use strict\";\n\nvar common = require(\"common\");\nvar gameManager = require(\"game_manager\");\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        speed_progress: cc.ProgressBar,\n        speed_progress_float: cc.ProgressBar,\n        lb: cc.Label\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        console.log(\"main ui on loaded\");\n        this.init();\n        this.speed_progress.progress = 0.0;\n        this.speed_progress_float.progress = 0.0;\n        var text = \"基础速度:\" + common.mountInfo.base_speed + \"\\n\";\n        text += \"浮动速度:\" + common.mountInfo.float_speed + \"\\n\";\n        text += \"加速效果:\" + common.mountInfo.float_speed_acceleration + \"\\n\";\n        this.lb.string = text;\n    },\n\n    init: function init() {\n        var self = this;\n        var isLoged = false;\n        gameManager.emitter.on(\"player_base_speed_change\", function (event) {\n            if (!self.speed_progress) {\n                return;\n            }\n            self.speed_progress.progress = event.detail.current / event.detail.max;\n        });\n        gameManager.emitter.on(\"player_speed_floating\", function (event) {\n            if (!self.speed_progress_float) {\n                return;\n            }\n            self.speed_progress_float.progress = (event.detail.current - 1) / (event.detail.max - 1);\n        });\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {}\n});\n\ncc._RF.pop();\n},{\"common\":\"common\",\"game_manager\":\"game_manager\"}]},{},[\"common\",\"game_manager\",\"simple-request\",\"main\",\"request\",\"player\",\"scroll\",\"target\",\"ui_begin\",\"ui_end\",\"ui_main\"])\n\n","\"use strict\";\ncc._RF.push(module, 'b92e3N9npRHXaRjHudJNxd2', 'game_manager');\n// Script/game_manager.js\n\n\"use strict\";\n\nvar request = require(\"./net/request\");\nvar common = require(\"common\");\nvar gameManager = gameManager || function () {\n    var that = {};\n    that.emitter = new cc.Node(\"game_manager\");\n    console.log(that.emitter);\n\n    that.start = function () {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        cc.director.loadScene('main');\n    };\n\n    that.end = function (passed_tm) {\n        request.CatchLolita(passed_tm, function (data) {\n            console.log(data);\n            var scene = cc.director.loadScene('end', function (param) {\n                var endScene = cc.director.getScene();\n                var endScript = endScene.children[0].getComponent(\"ui_end\");\n                endScript.init(data.fans);\n            });\n        });\n    };\n\n    that.restart = function () {\n        that.emitter = new cc.Node(\"game_manager\");\n        cc.director.loadScene('begin');\n    };\n    return that;\n}();\n\nmodule.exports = gameManager;\n\n// cc.Class({\n//     extends: cc.Component,\n\n//     properties: {\n//         player:cc.Node,\n//         bg:cc.Node,\n//         ui:cc.Node\n//         // foo: {\n//         //    default: null,      // The default value will be used only when the component attaching\n//         //                           to a node for the first time\n//         //    url: cc.Texture2D,  // optional, default is typeof default\n//         //    serializable: true, // optional, default is true\n//         //    visible: true,      // optional, default is true\n//         //    displayName: 'Foo', // optional\n//         //    readonly: false,    // optional, default is false\n//         // },\n//         // ...\n//     },\n\n//     // use this for initialization\n//     onLoad: function () {\n//         var manager = cc.director.getCollisionManager();\n//         manager.enabled = true;\n//         console.log(\"init bg script\");\n//         let bgScript=this.bg.getComponent(\"scroll\");\n//         bgScript.init(this);\n\n//         console.log(\"init player script\");\n//         let playerScript=this.player.getComponent(\"player\");\n//         playerScript.init(this);\n\n//         console.log(\"init ui script\");\n//         let uiScript=this.ui.getComponent(\"ui\");\n//         uiScript.init(this);\n//     },\n\n//     // called every frame, uncomment this function to activate update callback\n//     // update: function (dt) {\n\n//     // },\n// });\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, 'bee3a1CvJNBoYhcZiC5zxvX', 'main');\n// Script/main.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {}\n\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, '10cf4JEH8FKy5o9XIyEOnR6', 'player');\n// Script/player.js\n\n\"use strict\";\n\nvar common = require(\"common\");\nvar gameManager = require(\"game_manager\");\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        MaxPlayerBaseSpeed: 200,\n        PlayerAcceleration: 600,\n        MaxSpeedFloated: 1.6,\n        SpeedFloatRecovery: 0.6,\n        SpeedFloatAcceleration: 0.1,\n        touchParticle: cc.ParticleSystem\n\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        console.log(gameManager);\n        this.init();\n        this.MaxPlayerBaseSpeed = common.mountInfo.base_speed;\n        this.MaxSpeedFloated = common.mountInfo.float_speed;\n        this.SpeedFloatAcceleration = common.mountInfo.float_speed_acceleration;\n    },\n    init: function init() {\n        this.current_speed = 0;\n        this.enableInput = false;\n        this.baseSpeed = 0;\n        this.MaxSpeedFloated = common.mountInfo.float_speed;\n        this.current_speed_float = 1;\n        this.registerInput();\n\n        this.passed_tm = 0;\n    },\n    registerInput: function registerInput() {\n        var self = this;\n        // touch input\n        cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\n            onTouchBegan: function onTouchBegan(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n\n                var position = self.node.parent.convertTouchToNodeSpaceAR(touch);\n                self.touchParticle.node.x = position.x;\n                self.touchParticle.node.y = position.y;\n                self.touchParticle.resetSystem();\n                self.touchParticle.enabled = true;\n                return true;\n            },\n            onTouchMoved: function onTouchMoved(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n            },\n            onTouchEnded: function onTouchEnded(touch, event) {\n                if (!self.enableInput) {\n                    return;\n                }\n\n                self.current_speed_float += self.SpeedFloatAcceleration;\n                self.current_speed_float = Math.min(self.current_speed_float, self.MaxSpeedFloated);\n                gameManager.emitter.emit(\"player_speed_floating\", { msg: { max: self.MaxSpeedFloated, current: self.current_speed_float } });\n            }\n        }, self.node);\n    },\n\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        this.passed_tm += dt;\n        this.baseSpeed += this.PlayerAcceleration * dt;\n        if (this.baseSpeed > this.MaxPlayerBaseSpeed) {\n            this.baseSpeed = this.MaxPlayerBaseSpeed;\n            this.enableInput = true;\n        }\n\n        gameManager.emitter.emit(\"player_base_speed_change\", { max: this.MaxPlayerBaseSpeed, current: this.baseSpeed });\n\n        this.current_speed_float -= this.SpeedFloatRecovery * dt;\n        gameManager.emitter.emit(\"player_speed_floating\", { max: this.MaxSpeedFloated, current: this.current_speed_float });\n\n        this.current_speed_float = Math.max(this.current_speed_float, 1);\n        this.current_speed = this.baseSpeed * this.current_speed_float;\n    },\n    /**\n    * 当碰撞产生的时候调用\n    * @param  {Collider} other 产生碰撞的另一个碰撞组件\n    * @param  {Collider} self  产生碰撞的自身的碰撞组件\n     */\n    onCollisionEnter: function onCollisionEnter(other, self) {\n        console.log(common.playerInfo.nickname + ' catch lolita!!!');\n        gameManager.end(this.passed_tm);\n    }\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, 'ed43dIzl+hIbKUafMkc5ezW', 'request');\n// Script/net/request.js\n\n\"use strict\";\n\nvar simpleRequest = require(\"../lib/simple-request\");\nvar common = require(\"../common\");\n\nvar Request = Request || function () {\n    var that = {};\n    var server_address = \"http://test.game.xiaoyaoai.cn:30052\";\n    that.CatchLolita = function (tm, cb) {\n        simpleRequest.post(server_address, \"/user/be_catch\", {}, { \"target_id\": common.targetInfo.name, \"nickname\": common.playerInfo.nickname, \"tm\": tm }, cb);\n    };\n    return that;\n}();\nmodule.exports = Request;\n// cc.Class({\n//     extends: cc.Component,\n\n//     properties: {\n//         ServerAddress:\"localhost:30093\",\n//         // foo: {\n//         //    default: null,      // The default value will be used only when the component attaching\n//         //                           to a node for the first time\n//         //    url: cc.Texture2D,  // optional, default is typeof default\n//         //    serializable: true, // optional, default is true\n//         //    visible: true,      // optional, default is true\n//         //    displayName: 'Foo', // optional\n//         //    readonly: false,    // optional, default is false\n//         // },\n//         // ...\n//     },\n\n//     // use this for initialization\n//     onLoad: function () {\n\n//     },\n//     CatchLolita:function(target,tm){\n//         simpleRequest.post(this.ServerAddress,\"be_catch\",{},{\"target_id\":target,Nickname:common.playerInfo.nickname,tm:tm},function(err,data){\n//             console.log(\"request callback\");\n//         })\n//     }\n\n//     // called every frame, uncomment this function to activate update callback\n//     // update: function (dt) {\n\n//     // },\n// });\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, '2efa475NSNPNrsh+QanyzHg', 'scroll');\n// Script/scroll.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        player: cc.Node\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerController = this.player.getComponent(\"player\");\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        var dur = this.playerController.current_speed * dt;\n        var topY = 0;\n        for (var i = 0; i < this.node.childrenCount; i++) {\n            var child = this.node.children[i];\n            child.y -= dur;\n            if (child.y > topY) {\n                topY = child.y;\n            }\n        }\n        for (var _i = 0; _i < this.node.childrenCount; _i++) {\n            var _child = this.node.children[_i];\n            if (_child.y < -(_child.height * 1.5)) {\n                _child.y = topY + _child.height;\n            }\n        }\n    }\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, '363391WEHNNLpzBRKb/3v+U', 'simple-request');\n// Script/lib/simple-request.js\n\n\"use strict\";\n\n/**\n * Created by wizard on 16/4/1.\n */\nvar timeoutLimit = 30 * 1000;\n\n//SRequest.get(defines.gameHomeURL, \"s/Info/GetBag\", {test: 1, name: \"haha\"}, data=> {\n//  console.log('resp 1' + JSON.stringify(data));\n//});\n//\n//SRequest.post(defines.gameHomeURL, \"s/Info/RenamePet\", {\"pet_id\": 1000}, data=> {\n//  console.log('resp 2' + JSON.stringify(data));\n//})\n\nvar SRequest = SRequest || function () {\n  var that = {};\n\n  that.get = function (baseURL, handlerURL, params, cb) {\n    var xhr = new XMLHttpRequest();\n\n    var paramStr = getURLParamsString(params);\n    console.log(\"get string: \" + baseURL + handlerURL + paramStr);\n\n    xhr.open(\"GET\", baseURL + handlerURL + paramStr, true);\n    xhr.timeout = timeoutLimit;\n    xhr.onload = function () {\n      var data = JSON.parse(xhr.responseText);\n      if (cb) {\n        cb.call(this, data);\n      }\n    };\n    xhr.ontimeout = function () {\n      if (cb) {\n        cb.call(this, { timeout: true });\n      }\n    };\n    xhr.send();\n  };\n\n  that.post = function (baseURL, handlerURL, urlParams, params, cb) {\n\n    var xhr = new XMLHttpRequest(); // new HttpRequest instance\n    console.log('post', baseURL + handlerURL + getURLParamsString(urlParams));\n    xhr.open(\"POST\", baseURL + handlerURL + getURLParamsString(urlParams), true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.timeout = timeoutLimit;\n    xhr.onload = function () {\n      //console.log('xhr.onload',xhr.responseText);\n      var data = JSON.parse(xhr.responseText);\n      if (cb) {\n        cb.call(this, data);\n      }\n    };\n    xhr.ontimeout = function () {\n      if (cb) {\n        cb.call(this, { timeout: true });\n      }\n    };\n    console.log('xhr.onload', params);\n    var bodyContent = params ? JSON.stringify(params) : \"\";\n    xhr.onerror = function (e) {\n      console.log('server error ' + e);\n      if (cb) {\n        cb.call(this, { timeout: true });\n      }\n    };\n    xhr.send(bodyContent);\n  };\n\n  that.jump = function (url, params) {\n    var paramStr = getURLParamsString(params);\n    console.log(\"jump to url: \" + url + paramStr);\n    window.location.href = url + paramStr;\n  };\n\n  var getURLParamsString = function getURLParamsString(params, isStart) {\n    var paramStr = \"\";\n    if (params) {\n      var start = isStart != undefined ? isStart : true;\n      for (var index in params) {\n        if (start) {\n          start = false;\n          paramStr += \"?\";\n        } else {\n          paramStr += \"&\";\n        }\n        paramStr += index + \"=\" + params[index];\n      }\n    }\n\n    return paramStr;\n  };\n\n  return that;\n}();\nmodule.exports = SRequest;\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, '6a305F/xYBFj6frW/RuNUTZ', 'target');\n// Script/target.js\n\n\"use strict\";\n\nvar common = require(\"common\");\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        player: cc.Node,\n        speed: 400,\n        speakDuration: 3,\n        speakTextBox: cc.Label\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        console.log(\"target on loaded\");\n        console.log(common.targetInfo);\n        this.playerController = this.player.getComponent(\"player\");\n\n        this.speak_duration_now = 0;\n        this.speed = common.targetInfo.speed;\n        var sprite = this.node.getComponent(cc.Sprite);\n        sprite.spriteFrame = new cc.SpriteFrame(cc.url.raw(\"Texture/\" + \"target_\" + common.targetInfo.name + \".png\"));\n\n        // cc.loader.load(cc.url.raw(\"Texture/\"+\"target_\"+common.targetInfo.name+\".png\"),cc.SpriteFrame,function (err, spriteFrame) {\n        //     if(err){\n        //         console.log(err);\n        //         return\n        //     }\n        //     sprite.spriteFrame=spriteFrame;\n        // });\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        var speed = this.speed - this.playerController.current_speed;\n        this.node.y += speed * dt;\n\n        this.speak_duration_now += dt;\n        if (this.speak_duration_now > this.speakDuration) {\n            this.speakTextBox.enabled = false;\n        }\n    }\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, '67655elHOdPsp2u/VSmhf6P', 'ui_begin');\n// Script/ui/ui_begin.js\n\n\"use strict\";\n\nvar common = require(\"common\");\nvar gameManager = require(\"game_manager\");\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        ebox_nickname: cc.EditBox,\n        toggleGroup: cc.ToggleGroup\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var self = this;\n        this.node.on('touchend', function (event) {\n            console.log('touchend');\n            common.playerInfo.nickname = self.ebox_nickname.string;\n            if (common.playerInfo.nickname == \"\") {\n                alert(\"昵称不能为空\");\n                return;\n            }\n\n            for (var i = 0; i < self.toggleGroup.toggleItems.length; i++) {\n                var item = self.toggleGroup.toggleItems[i];\n                console.log(item.name);\n                if (item.isChecked) {\n                    common.SelectTarget(i);\n                }\n            }\n            gameManager.start();\n        }, this);\n    }\n\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, 'f60deSZV2dHjoaQ5BGbW+8J', 'ui_end');\n// Script/ui/ui_end.js\n\n'use strict';\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        BtnRestart: cc.Button,\n        LabelRank: cc.Label\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.BtnRestart.node.on('touchend', function (event) {\n            console.log('touchend');\n            cc.director.loadScene('begin');\n        }, this);\n    },\n\n    init: function init(rankList) {\n        this.LabelRank.string = \"\";\n        console.log(rankList.length);\n        for (var i = 0; i < rankList.length; i++) {\n            this.LabelRank.string += i + 1 + \".\" + rankList[i].nickname + \":\" + rankList[i].tm.toFixed(2) + \"\\n\";\n        }\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RF.pop();","\"use strict\";\ncc._RF.push(module, 'a191bhJYSpCOLGrL0KJ9P9a', 'ui_main');\n// Script/ui/ui_main.js\n\n\"use strict\";\n\nvar common = require(\"common\");\nvar gameManager = require(\"game_manager\");\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        speed_progress: cc.ProgressBar,\n        speed_progress_float: cc.ProgressBar,\n        lb: cc.Label\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        console.log(\"main ui on loaded\");\n        this.init();\n        this.speed_progress.progress = 0.0;\n        this.speed_progress_float.progress = 0.0;\n        var text = \"基础速度:\" + common.mountInfo.base_speed + \"\\n\";\n        text += \"浮动速度:\" + common.mountInfo.float_speed + \"\\n\";\n        text += \"加速效果:\" + common.mountInfo.float_speed_acceleration + \"\\n\";\n        this.lb.string = text;\n    },\n\n    init: function init() {\n        var self = this;\n        var isLoged = false;\n        gameManager.emitter.on(\"player_base_speed_change\", function (event) {\n            if (!self.speed_progress) {\n                return;\n            }\n            self.speed_progress.progress = event.detail.current / event.detail.max;\n        });\n        gameManager.emitter.on(\"player_speed_floating\", function (event) {\n            if (!self.speed_progress_float) {\n                return;\n            }\n            self.speed_progress_float.progress = (event.detail.current - 1) / (event.detail.max - 1);\n        });\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {}\n});\n\ncc._RF.pop();"],"sourceRoot":"/source/"}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=